<dec f='include/llvm-6.0/llvm/Support/FileSystem.h' l='713' type='std::error_code llvm::sys::fs::createUniqueFile(const llvm::Twine &amp; Model, int &amp; ResultFD, SmallVectorImpl&lt;char&gt; &amp; ResultPath, unsigned int Mode = all_read | all_write, sys::fs::OpenFlags Flags = sys::fs::F_RW)'/>
<doc f='include/llvm-6.0/llvm/Support/FileSystem.h' l='692'>/// @brief Create a uniquely named file.
///
/// Generates a unique path suitable for a temporary file and then opens it as a
/// file. The name is based on \a model with &apos;%&apos; replaced by a random char in
/// [0-9a-f]. If \a model is not an absolute path, the temporary file will be
/// created in the current directory.
///
/// Example: clang-%%-%%-%%-%%-%%.s =&gt; clang-a0-b1-c2-d3-e4.s
///
/// This is an atomic operation. Either the file is created and opened, or the
/// file system is left untouched.
///
/// The intended use is for files that are to be kept, possibly after
/// renaming them. For example, when running &apos;clang -c foo.o&apos;, the file can
/// be first created as foo-abc123.o and then renamed.
///
/// @param Model Name to base unique path off of.
/// @param ResultFD Set to the opened file&apos;s file descriptor.
/// @param ResultPath Set to the opened file&apos;s absolute path.
/// @returns errc::success if Result{FD,Path} have been successfully set,
///          otherwise a platform-specific error_code.</doc>
<use f='pocl/lib/llvmopencl/LLVMFileUtils.cc' l='75' u='c' c='pocl_mk_tempname'/>
<use f='pocl/lib/llvmopencl/LLVMFileUtils.cc' l='75' u='c' c='pocl_write_file'/>
<use f='pocl/lib/llvmopencl/LLVMFileUtils.cc' l='75' u='c' c='pocl_write_tempfile'/>
<use f='pocl/lib/llvmopencl/LLVMFileUtils.cc' l='75' u='c' c='pocl_write_module'/>
