<def f='include/llvm-6.0/llvm/Analysis/LazyCallGraph.h' l='135' ll='174'/>
<size>8</size>
<doc f='include/llvm-6.0/llvm/Analysis/LazyCallGraph.h' l='121'>/// A class used to represent edges in the call graph.
  ///
  /// The lazy call graph models both *call* edges and *reference* edges. Call
  /// edges are much what you would expect, and exist when there is a &apos;call&apos; or
  /// &apos;invoke&apos; instruction of some function. Reference edges are also tracked
  /// along side these, and exist whenever any instruction (transitively
  /// through its operands) references a function. All call edges are
  /// inherently reference edges, and so the reference graph forms a superset
  /// of the formal call graph.
  ///
  /// All of these forms of edges are fundamentally represented as outgoing
  /// edges. The edges are stored in the source node and point at the target
  /// node. This allows the edge structure itself to be a very compact data
  /// structure: essentially a tagged pointer.</doc>
<fun r='_ZN4llvm13LazyCallGraph4EdgeC1Ev'/>
<fun r='_ZN4llvm13LazyCallGraph4EdgeC1ERNS0_4NodeENS1_4KindE'/>
<fun r='_ZNK4llvm13LazyCallGraph4EdgecvbEv'/>
<fun r='_ZNK4llvm13LazyCallGraph4Edge7getKindEv'/>
<fun r='_ZNK4llvm13LazyCallGraph4Edge6isCallEv'/>
<fun r='_ZNK4llvm13LazyCallGraph4Edge7getNodeEv'/>
<fun r='_ZNK4llvm13LazyCallGraph4Edge11getFunctionEv'/>
<mbr r='llvm::LazyCallGraph::Edge::Value' o='0' t='PointerIntPair&lt;llvm::LazyCallGraph::Node *, 1, llvm::LazyCallGraph::Edge::Kind&gt;'/>
<fun r='_ZN4llvm13LazyCallGraph4Edge7setKindENS1_4KindE'/>
<fun r='_ZN4llvm13LazyCallGraph4EdgeC1Ev'/>
<fun r='_ZN4llvm13LazyCallGraph4EdgeC1ERNS0_4NodeENS1_4KindE'/>
<fun r='_ZNK4llvm13LazyCallGraph4EdgecvbEv'/>
<fun r='_ZNK4llvm13LazyCallGraph4Edge7getKindEv'/>
<fun r='_ZNK4llvm13LazyCallGraph4Edge6isCallEv'/>
<fun r='_ZNK4llvm13LazyCallGraph4Edge7getNodeEv'/>
<fun r='_ZNK4llvm13LazyCallGraph4Edge11getFunctionEv'/>
