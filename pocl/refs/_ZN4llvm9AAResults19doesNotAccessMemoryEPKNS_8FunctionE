<def f='include/llvm-6.0/llvm/Analysis/AliasAnalysis.h' l='421' ll='423' type='bool llvm::AAResults::doesNotAccessMemory(const llvm::Function * F)'/>
<doc f='include/llvm-6.0/llvm/Analysis/AliasAnalysis.h' l='410'>/// Checks if the specified function is known to never read or write memory.
  ///
  /// Note that if the function only reads from known-constant memory, it is
  /// also legal to return true. Also, function that unwind the stack are legal
  /// for this predicate.
  ///
  /// Many optimizations (such as CSE and LICM) can be performed on such calls
  /// to such functions without worrying about aliasing properties, and many
  /// functions have this property (e.g. &apos;sin&apos; and &apos;cos&apos;).
  ///
  /// This property corresponds to the GCC &apos;const&apos; attribute.</doc>
