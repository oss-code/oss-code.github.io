<dec f='include/llvm-6.0/llvm/IR/PassManagerInternal.h' l='111' type='bool llvm::detail::AnalysisResultConcept::invalidate(IRUnitT &amp; IR, const PreservedAnalysesT &amp; PA, InvalidatorT &amp; Inv)'/>
<doc f='include/llvm-6.0/llvm/IR/PassManagerInternal.h' l='96'>/// \brief Method to try and mark a result as invalid.
  ///
  /// When the outer analysis manager detects a change in some underlying
  /// unit of the IR, it will call this method on all of the results cached.
  ///
  /// \p PA is a set of preserved analyses which can be used to avoid
  /// invalidation because the pass which changed the underlying IR took care
  /// to update or preserve the analysis result in some way.
  ///
  /// \p Inv is typically a \c AnalysisManager::Invalidator object that can be
  /// used by a particular analysis result to discover if other analyses
  /// results are also invalidated in the event that this result depends on
  /// them. See the documentation in the \c AnalysisManager for more details.
  ///
  /// \returns true if the result is indeed invalid (the default).</doc>
