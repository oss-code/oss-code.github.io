<dec f='include/llvm-6.0/llvm/Analysis/MemoryDependenceAnalysis.h' l='442' type='llvm::MemDepResult llvm::MemoryDependenceResults::getPointerDependencyFrom(const llvm::MemoryLocation &amp; Loc, bool isLoad, BasicBlock::iterator ScanIt, llvm::BasicBlock * BB, llvm::Instruction * QueryInst = nullptr, unsigned int * Limit = nullptr)'/>
<doc f='include/llvm-6.0/llvm/Analysis/MemoryDependenceAnalysis.h' l='429'>/// Returns the instruction on which a memory location depends.
  ///
  /// If isLoad is true, this routine ignores may-aliases with read-only
  /// operations.  If isLoad is false, this routine ignores may-aliases
  /// with reads from read-only locations. If possible, pass the query
  /// instruction as well; this function may take advantage of the metadata
  /// annotated to the query instruction to refine the result. \p Limit
  /// can be used to set the maximum number of instructions that will be
  /// examined to find the pointer dependency. On return, it will be set to
  /// the number of instructions left to examine. If a null pointer is passed
  /// in, the limit will default to the value of -memdep-block-scan-limit.
  ///
  /// Note that this is an uncached query, and thus may be inefficient.</doc>
