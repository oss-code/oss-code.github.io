<dec f='include/llvm-6.0/llvm/IR/Type.h' l='287' type='unsigned int llvm::Type::getPrimitiveSizeInBits() const'/>
<use f='include/llvm-6.0/llvm/IR/DerivedTypes.h' l='407' u='c' c='_ZN4llvm10VectorType10getIntegerEPS0_'/>
<use f='include/llvm-6.0/llvm/IR/DerivedTypes.h' l='416' u='c' c='_ZN4llvm10VectorType28getExtendedElementVectorTypeEPS0_'/>
<use f='include/llvm-6.0/llvm/IR/DerivedTypes.h' l='424' u='c' c='_ZN4llvm10VectorType29getTruncatedElementVectorTypeEPS0_'/>
<use f='include/llvm-6.0/llvm/IR/DerivedTypes.h' l='453' u='c' c='_ZNK4llvm10VectorType11getBitWidthEv'/>
<doc f='include/llvm-6.0/llvm/IR/Type.h' l='277'>/// Return the basic size of this type if it is a primitive type. These are
  /// fixed by LLVM and are not target-dependent.
  /// This will return zero if the type does not have a size or is not a
  /// primitive type.
  ///
  /// Note that this may not reflect the size of memory allocated for an
  /// instance of the type or the number of bytes that are written when an
  /// instance of the type is stored to memory. The DataLayout class provides
  /// additional query functions to provide this information.
  ///</doc>
