<dec f='include/llvm-6.0/llvm/Analysis/LazyCallGraph.h' l='641' type='bool llvm::LazyCallGraph::RefSCC::isAncestorOf(const llvm::LazyCallGraph::RefSCC &amp; RC) const'/>
<use f='include/llvm-6.0/llvm/Analysis/LazyCallGraph.h' l='655' u='c' c='_ZNK4llvm13LazyCallGraph6RefSCC14isDescendantOfERKS1_'/>
<doc f='include/llvm-6.0/llvm/Analysis/LazyCallGraph.h' l='636'>/// Test if this RefSCC is an ancestor of \a RC.
    ///
    /// CAUTION: This method walks the directed graph of edges as far as
    /// necessary to find a possible path to the argument. In the worst case
    /// this may walk the entire graph and can be extremely expensive.</doc>
