<inh f='include/llvm-6.0/llvm/ADT/EpochTracker.h' l='83' c='llvm::DebugEpochBase'/>
<def f='include/llvm-6.0/llvm/ADT/SmallPtrSet.h' l='50' ll='218'/>
<ovr f='include/llvm-6.0/llvm/ADT/SmallPtrSet.h' l='344' c='llvm::SmallPtrSetImpl'/>
<size>32</size>
<doc f='include/llvm-6.0/llvm/ADT/SmallPtrSet.h' l='32'>/// SmallPtrSetImplBase - This is the common code shared among all the
/// SmallPtrSet&lt;&gt;&apos;s, which is almost everything.  SmallPtrSet has two modes, one
/// for small and one for large sets.
///
/// Small sets use an array of pointers allocated in the SmallPtrSet object,
/// which is treated as a simple array of pointers.  When a pointer is added to
/// the set, the array is scanned to see if the element already exists, if not
/// the element is &apos;pushed back&apos; onto the array.  If we run out of space in the
/// array, we grow into the &apos;large set&apos; case.  SmallSet should be used when the
/// sets are often small.  In this case, no memory allocation is used, and only
/// light-weight and cache-efficient scanning is used.
///
/// Large sets use a classic exponentially-probed hash table.  Empty buckets are
/// represented with an illegal pointer value (-1) to allow null pointers to be
/// inserted.  Tombstones are represented with another illegal pointer value
/// (-2), to allow deletion.  The hash table is resized when the table is 3/4 or
/// more.  When this happens, the table is doubled in size.
///</doc>
<mbr r='llvm::SmallPtrSetImplBase::SmallArray' o='0' t='const void **'/>
<mbr r='llvm::SmallPtrSetImplBase::CurArray' o='64' t='const void **'/>
<mbr r='llvm::SmallPtrSetImplBase::CurArraySize' o='128' t='unsigned int'/>
<mbr r='llvm::SmallPtrSetImplBase::NumNonEmpty' o='160' t='unsigned int'/>
<mbr r='llvm::SmallPtrSetImplBase::NumTombstones' o='192' t='unsigned int'/>
<fun r='_ZN4llvm19SmallPtrSetImplBaseC1EPPKvRKS0_'/>
<fun r='_ZN4llvm19SmallPtrSetImplBaseC1EPPKvjOS0_'/>
<fun r='_ZN4llvm19SmallPtrSetImplBaseC1EPPKvj'/>
<fun r='_ZN4llvm19SmallPtrSetImplBaseD1Ev'/>
<fun r='_ZN4llvm19SmallPtrSetImplBaseaSERKS0_'/>
<fun r='_ZNK4llvm19SmallPtrSetImplBase5emptyEv'/>
<fun r='_ZNK4llvm19SmallPtrSetImplBase4sizeEv'/>
<fun r='_ZN4llvm19SmallPtrSetImplBase5clearEv'/>
<fun r='_ZN4llvm19SmallPtrSetImplBase18getTombstoneMarkerEv'/>
<fun r='_ZN4llvm19SmallPtrSetImplBase14getEmptyMarkerEv'/>
<fun r='_ZNK4llvm19SmallPtrSetImplBase10EndPointerEv'/>
<fun r='_ZN4llvm19SmallPtrSetImplBase10insert_impEPKv'/>
<fun r='_ZN4llvm19SmallPtrSetImplBase9erase_impEPKv'/>
<fun r='_ZNK4llvm19SmallPtrSetImplBase8find_impEPKv'/>
<fun r='_ZNK4llvm19SmallPtrSetImplBase7isSmallEv'/>
<fun r='_ZN4llvm19SmallPtrSetImplBase14insert_imp_bigEPKv'/>
<fun r='_ZNK4llvm19SmallPtrSetImplBase13FindBucketForEPKv'/>
<fun r='_ZN4llvm19SmallPtrSetImplBase16shrink_and_clearEv'/>
<fun r='_ZN4llvm19SmallPtrSetImplBase4GrowEj'/>
<fun r='_ZN4llvm19SmallPtrSetImplBase4swapERS0_'/>
<fun r='_ZN4llvm19SmallPtrSetImplBase8CopyFromERKS0_'/>
<fun r='_ZN4llvm19SmallPtrSetImplBase8MoveFromEjOS0_'/>
<fun r='_ZN4llvm19SmallPtrSetImplBase10MoveHelperEjOS0_'/>
<fun r='_ZN4llvm19SmallPtrSetImplBase10CopyHelperERKS0_'/>
