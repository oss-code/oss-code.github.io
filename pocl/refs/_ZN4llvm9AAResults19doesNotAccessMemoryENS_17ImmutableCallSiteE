<def f='include/llvm-6.0/llvm/Analysis/AliasAnalysis.h' l='406' ll='408' type='bool llvm::AAResults::doesNotAccessMemory(llvm::ImmutableCallSite CS)'/>
<doc f='include/llvm-6.0/llvm/Analysis/AliasAnalysis.h' l='395'>/// Checks if the specified call is known to never read or write memory.
  ///
  /// Note that if the call only reads from known-constant memory, it is also
  /// legal to return true. Also, calls that unwind the stack are legal for
  /// this predicate.
  ///
  /// Many optimizations (such as CSE and LICM) can be performed on such calls
  /// without worrying about aliasing properties, and many calls have this
  /// property (e.g. calls to &apos;sin&apos; and &apos;cos&apos;).
  ///
  /// This property corresponds to the GCC &apos;const&apos; attribute.</doc>
