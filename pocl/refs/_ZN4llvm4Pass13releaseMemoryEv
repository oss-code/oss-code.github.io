<dec f='include/llvm-6.0/llvm/Pass.h' l='158' type='void llvm::Pass::releaseMemory()'/>
<ovr f='include/llvm-6.0/llvm/Analysis/AssumptionCache.h' l='215' c='_ZN4llvm22AssumptionCacheTracker13releaseMemoryEv'/>
<doc f='include/llvm-6.0/llvm/Pass.h' l='148'>/// releaseMemory() - This member can be implemented by a pass if it wants to
  /// be able to release its memory when it is no longer needed.  The default
  /// behavior of passes is to hold onto memory for the entire duration of their
  /// lifetime (which is the entire compile time).  For pipelined passes, this
  /// is not a big deal because that memory gets recycled every time the pass is
  /// invoked on another program unit.  For IP passes, it is more important to
  /// free memory when it is unused.
  ///
  /// Optionally implement this function to release pass memory when it is no
  /// longer used.</doc>
<ovr f='include/llvm-6.0/llvm/IR/Dominators.h' l='288' c='_ZN4llvm24DominatorTreeWrapperPass13releaseMemoryEv'/>
<ovr f='include/llvm-6.0/llvm/Analysis/PostDominators.h' l='82' c='_ZN4llvm28PostDominatorTreeWrapperPass13releaseMemoryEv'/>
<ovr f='include/llvm-6.0/llvm/Analysis/LoopInfo.h' l='976' c='_ZN4llvm19LoopInfoWrapperPass13releaseMemoryEv'/>
