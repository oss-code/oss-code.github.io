<dec f='include/llvm-6.0/llvm/ADT/StringRef.h' l='784' type='void llvm::StringRef::split(SmallVectorImpl&lt;llvm::StringRef&gt; &amp; A, char Separator, int MaxSplit = -1, bool KeepEmpty = true) const'/>
<doc f='include/llvm-6.0/llvm/ADT/StringRef.h' l='770'>/// Split into substrings around the occurrences of a separator character.
    ///
    /// Each substring is stored in \p A. If \p MaxSplit is &gt;= 0, at most
    /// \p MaxSplit splits are done and consequently &lt;= \p MaxSplit + 1
    /// elements are added to A.
    /// If \p KeepEmpty is false, empty strings are not added to \p A. They
    /// still count when considering \p MaxSplit
    /// An useful invariant is that
    /// Separator.join(A) == *this if MaxSplit == -1 and KeepEmpty == true
    ///
    /// \param A - Where to put the substrings.
    /// \param Separator - The string to split on.
    /// \param MaxSplit - The maximum number of times the string is split.
    /// \param KeepEmpty - True if empty substring should be added.</doc>
