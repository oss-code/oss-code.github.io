<dec f='include/llvm-6.0/llvm/Analysis/TargetTransformInfo.h' l='822' type='int llvm::TargetTransformInfo::getAddressComputationCost(llvm::Type * Ty, llvm::ScalarEvolution * SE = nullptr, const llvm::SCEV * Ptr = nullptr) const'/>
<doc f='include/llvm-6.0/llvm/Analysis/TargetTransformInfo.h' l='815'>/// \returns The cost of the address computation. For most targets this can be
  /// merged into the instruction indexing mode. Some targets might want to
  /// distinguish between address computation for memory operations on vector
  /// types and scalar types. Such targets should override this function.
  /// The &apos;SE&apos; parameter holds pointer for the scalar evolution object which
  /// is used in order to get the Ptr step value in case of constant stride.
  /// The &apos;Ptr&apos; parameter holds SCEV of the access pointer.</doc>
