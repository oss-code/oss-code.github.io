<def f='include/llvm-6.0/llvm/IR/ValueHandle.h' l='337' ll='380'/>
<doc f='include/llvm-6.0/llvm/IR/ValueHandle.h' l='321'>/// \brief Value handle that tracks a Value across RAUW.
///
/// TrackingVH is designed for situations where a client needs to hold a handle
/// to a Value (or subclass) across some operations which may move that value,
/// but should never destroy it or replace it with some unacceptable type.
///
/// It is an error to attempt to replace a value with one of a type which is
/// incompatible with any of its outstanding TrackingVHs.
///
/// It is an error to read from a TrackingVH that does not point to a valid
/// value.  A TrackingVH is said to not point to a valid value if either it
/// hasn&apos;t yet been assigned a value yet or because the value it was tracking
/// has since been deleted.
///
/// Assigning a value to a TrackingVH is always allowed, even if said TrackingVH
/// no longer points to a valid value.</doc>
<mbr r='llvm::TrackingVH::InnerHandle' t='llvm::WeakTrackingVH'/>
<fun r='_ZNK4llvm10TrackingVH9getValPtrEv'/>
<fun r='_ZN4llvm10TrackingVH9setValPtrEPT_'/>
<fun r='_ZN4llvm10TrackingVH10GetAsValueEPNS_5ValueE'/>
<fun r='_ZN4llvm10TrackingVH10GetAsValueEPKNS_5ValueE'/>
<fun r='_ZN4llvm10TrackingVHC1Ev'/>
<fun r='_ZN4llvm10TrackingVHC1EPT_'/>
<fun r='_ZNK4llvm10TrackingVHcvPT_Ev'/>
<fun r='_ZN4llvm10TrackingVHaSEPT_'/>
<fun r='_ZNK4llvm10TrackingVHptEv'/>
<fun r='_ZNK4llvm10TrackingVHdeEv'/>
