<use f='include/llvm-6.0/llvm/IR/DebugInfoMetadata.h' l='1359' u='c' c='_ZNK4llvm10DILocation15canDiscriminateERKS0_'/>
<use f='include/llvm-6.0/llvm/IR/DebugInfoMetadata.h' l='1359' u='c' c='_ZNK4llvm10DILocation15canDiscriminateERKS0_'/>
<dec f='include/llvm-6.0/llvm/IR/DebugInfoMetadata.h' l='1390' type='unsigned int llvm::DILocation::getDiscriminator() const'/>
<def f='include/llvm-6.0/llvm/IR/DebugInfoMetadata.h' l='1803' ll='1807' type='unsigned int llvm::DILocation::getDiscriminator() const'/>
<use f='include/llvm-6.0/llvm/IR/DebugInfoMetadata.h' l='1827' u='c' c='_ZNK4llvm10DILocation20getBaseDiscriminatorEv'/>
<use f='include/llvm-6.0/llvm/IR/DebugInfoMetadata.h' l='1831' u='c' c='_ZNK4llvm10DILocation20getDuplicationFactorEv'/>
<use f='include/llvm-6.0/llvm/IR/DebugInfoMetadata.h' l='1835' u='c' c='_ZNK4llvm10DILocation17getCopyIdentifierEv'/>
<doc f='include/llvm-6.0/llvm/IR/DebugInfoMetadata.h' l='1364'>/// Get the DWARF discriminator.
  ///
  /// DWARF discriminators distinguish identical file locations between
  /// instructions that are on different basic blocks.
  ///
  /// There are 3 components stored in discriminator, from lower bits:
  ///
  /// Base discriminator: assigned by AddDiscriminators pass to identify IRs
  ///                     that are defined by the same source line, but
  ///                     different basic blocks.
  /// Duplication factor: assigned by optimizations that will scale down
  ///                     the execution frequency of the original IR.
  /// Copy Identifier: assigned by optimizations that clones the IR.
  ///                  Each copy of the IR will be assigned an identifier.
  ///
  /// Encoding:
  ///
  /// The above 3 components are encoded into a 32bit unsigned integer in
  /// order. If the lowest bit is 1, the current component is empty, and the
  /// next component will start in the next bit. Otherwise, the the current
  /// component is non-empty, and its content starts in the next bit. The
  /// length of each components is either 5 bit or 12 bit: if the 7th bit
  /// is 0, the bit 2~6 (5 bits) are used to represent the component; if the
  /// 7th bit is 1, the bit 2~6 (5 bits) and 8~14 (7 bits) are combined to
  /// represent the component.</doc>
