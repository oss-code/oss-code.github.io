<dec f='include/llvm-6.0/llvm/IR/Instructions.h' l='1366' type='void llvm::CallInst::CallInst(llvm::FunctionType * Ty, llvm::Value * Func, ArrayRef&lt;llvm::Value *&gt; Args, ArrayRef&lt;OperandBundleDef&gt; Bundles, const llvm::Twine &amp; NameStr, llvm::Instruction * InsertBefore)'/>
<use f='include/llvm-6.0/llvm/IR/Instructions.h' l='1373' u='c' c='_ZN4llvm8CallInstC1EPNS_5ValueENS_8ArrayRefIS2_EENS3_INS_17OperandBundleDefTIS2_EEEERKNS_5TwineEPNS_11InstructionE'/>
<use f='include/llvm-6.0/llvm/IR/Instructions.h' l='1432' u='c' c='_ZN4llvm8CallInst6CreateEPNS_12FunctionTypeEPNS_5ValueENS_8ArrayRefIS4_EERKNS_5TwineEPNS_11InstructionE'/>
<use f='include/llvm-6.0/llvm/IR/Instructions.h' l='1444' u='c' c='_ZN4llvm8CallInst6CreateEPNS_12FunctionTypeEPNS_5ValueENS_8ArrayRefIS4_EENS5_INS_17OperandBundleDefTIS4_EEEERKNS_5TwineEPNS_11InstructionE'/>
<def f='include/llvm-6.0/llvm/IR/Instructions.h' l='1947' ll='1956' type='void llvm::CallInst::CallInst(llvm::FunctionType * Ty, llvm::Value * Func, ArrayRef&lt;llvm::Value *&gt; Args, ArrayRef&lt;OperandBundleDef&gt; Bundles, const llvm::Twine &amp; NameStr, llvm::Instruction * InsertBefore)'/>
<doc f='include/llvm-6.0/llvm/IR/Instructions.h' l='1364'>/// Construct a CallInst given a range of arguments.
  /// Construct a CallInst from a range of arguments</doc>
