<dec f='include/llvm-6.0/llvm/Analysis/LazyCallGraph.h' l='1020' type='void llvm::LazyCallGraph::insertEdge(llvm::LazyCallGraph::Node &amp; SourceN, llvm::LazyCallGraph::Node &amp; TargetN, Edge::Kind EK)'/>
<use f='include/llvm-6.0/llvm/Analysis/LazyCallGraph.h' l='1024' u='c' c='_ZN4llvm13LazyCallGraph10insertEdgeERNS_8FunctionES2_NS0_4Edge4KindE'/>
<doc f='include/llvm-6.0/llvm/Analysis/LazyCallGraph.h' l='1008'>///@{
  /// \name Pre-SCC Mutation API
  ///
  /// These methods are only valid to call prior to forming any SCCs for this
  /// call graph. They can be used to update the core node-graph during
  /// a node-based inorder traversal that precedes any SCC-based traversal.
  ///
  /// Once you begin manipulating a call graph&apos;s SCCs, most mutation of the
  /// graph must be performed via a RefSCC method. There are some exceptions
  /// below.

  /// Update the call graph after inserting a new edge.</doc>
