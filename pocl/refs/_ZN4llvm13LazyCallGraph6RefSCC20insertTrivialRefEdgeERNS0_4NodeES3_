<dec f='include/llvm-6.0/llvm/Analysis/LazyCallGraph.h' l='864' type='void llvm::LazyCallGraph::RefSCC::insertTrivialRefEdge(llvm::LazyCallGraph::Node &amp; SourceN, llvm::LazyCallGraph::Node &amp; TargetN)'/>
<doc f='include/llvm-6.0/llvm/Analysis/LazyCallGraph.h' l='855'>/// A convenience wrapper around the above to handle trivial cases of
    /// inserting a new ref edge.
    ///
    /// This is trivial whenever the target is in the same RefSCC as the source
    /// or the edge is an outgoing edge to some descendant RefSCC. In these
    /// cases there is no change to the cyclic structure of the RefSCCs.
    ///
    /// To further make calling this convenient, it also handles inserting
    /// already existing edges.</doc>
