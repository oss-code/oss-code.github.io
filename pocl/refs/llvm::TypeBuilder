<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='85'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='104' ll='105'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='106' ll='107'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='108' ll='109'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='112' ll='117'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='120'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='123' ll='128'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='130' ll='135'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='170' macro='1'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='170' macro='1'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='171' macro='1'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='171' macro='1'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='172' macro='1'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='172' macro='1'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='173' macro='1'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='173' macro='1'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='174' macro='1'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='174' macro='1'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='175' macro='1'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='175' macro='1'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='176' macro='1'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='176' macro='1'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='177' macro='1'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='177' macro='1'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='178' macro='1'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='178' macro='1'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='183' macro='1'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='183' macro='1'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='184' macro='1'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='184' macro='1'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='188' ll='194'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='196' ll='201'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='202'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='204' ll='209'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='210'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='212' ll='215'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='216' ll='219'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='220' ll='223'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='224' ll='227'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='228' ll='231'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='232' ll='235'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='237' ll='242'/>
<ovr f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='246' c='llvm::TypeBuilder'/>
<inh f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='112' c='llvm::TypeBuilder'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='246' ll='247'/>
<ovr f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='248' c='llvm::TypeBuilder'/>
<inh f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='112' c='llvm::TypeBuilder'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='248' ll='249'/>
<ovr f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='250' c='llvm::TypeBuilder'/>
<inh f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='112' c='llvm::TypeBuilder'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='250' ll='251'/>
<ovr f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='252' c='llvm::TypeBuilder'/>
<inh f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='112' c='llvm::TypeBuilder'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='252' ll='253'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='255' ll='260'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='261' ll='270'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='271' ll='282'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='283' ll='295'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='297' ll='311'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='313' ll='328'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='330' ll='335'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='336' ll='345'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='346' ll='357'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='358' ll='370'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='372' ll='386'/>
<def f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='388' ll='403'/>
<def f='pocl/lib/llvmopencl/Workgroup.cc' l='94' ll='144'/>
<size>1</size>
<doc f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='24'>/// TypeBuilder - This provides a uniform API for looking up types
/// known at compile time.  To support cross-compilation, we define a
/// series of tag types in the llvm::types namespace, like i&lt;N&gt;,
/// ieee_float, ppc_fp128, etc.  TypeBuilder&lt;T, false&gt; allows T to be
/// any of these, a native C type (whose size may depend on the host
/// compiler), or a pointer, function, or struct type built out of
/// these.  TypeBuilder&lt;T, true&gt; removes native C types from this set
/// to guarantee that its result is suitable for cross-compilation.
/// We define the primitive types, pointer types, and functions up to
/// 5 arguments here, but to use this class with your own types,
/// you&apos;ll need to specialize it.  For example, say you want to call a
/// function defined externally as:
///
/// \code{.cpp}
///
///   struct MyType {
///     int32 a;
///     int32 *b;
///     void *array[1];  // Intended as a flexible array.
///   };
///   int8 AFunction(struct MyType *value);
///
/// \endcode
///
/// You&apos;ll want to use
///   Function::Create(TypeBuilder&lt;types::i&lt;8&gt;(MyType*), true&gt;::get(), ...)
/// to declare the function, but when you first try this, your compiler will
/// complain that TypeBuilder&lt;MyType, true&gt;::get() doesn&apos;t exist. To fix this,
/// write:
///
/// \code{.cpp}
///
///   namespace llvm {
///   template&lt;bool xcompile&gt; class TypeBuilder&lt;MyType, xcompile&gt; {
///   public:
///     static StructType *get(LLVMContext &amp;Context) {
///       // If you cache this result, be sure to cache it separately
///       // for each LLVMContext.
///       return StructType::get(
///         TypeBuilder&lt;types::i&lt;32&gt;, xcompile&gt;::get(Context),
///         TypeBuilder&lt;types::i&lt;32&gt;*, xcompile&gt;::get(Context),
///         TypeBuilder&lt;types::i&lt;8&gt;*[], xcompile&gt;::get(Context),
///         nullptr);
///     }
///
///     // You may find this a convenient place to put some constants
///     // to help with getelementptr.  They don&apos;t have any effect on
///     // the operation of TypeBuilder.
///     enum Fields {
///       FIELD_A,
///       FIELD_B,
///       FIELD_ARRAY
///     };
///   }
///   }  // namespace llvm
///
/// \endcode
///
/// TypeBuilder cannot handle recursive types or types you only know at runtime.
/// If you try to give it a recursive type, it will deadlock, infinitely
/// recurse, or do something similarly undesirable.</doc>
<doc f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='103'>// LLVM doesn&apos;t have const or volatile types.</doc>
<doc f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='111'>// Pointers</doc>
<doc f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='119'>/// There is no support for references</doc>
<doc f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='122'>// Arrays</doc>
<doc f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='129'>/// LLVM uses an array of length 0 to represent an unknown-length array.</doc>
<doc f='include/llvm-6.0/llvm/IR/TypeBuilder.h' l='244'>/// void* is disallowed in LLVM types, but it occurs often enough in C code that
/// we special case it.</doc>
<fun r='_ZN4llvm11TypeBuilderIPT_XT0_EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderIAT0__T_XT1_EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderIA_T_XT0_EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderIcLb0EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderIaLb0EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderIhLb0EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderIsLb0EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderItLb0EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderIiLb0EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderIjLb0EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderIlLb0EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderImLb0EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderIxLb0EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderIyLb0EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderINS_5types1iIXT_EEEXT0_EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderIfLb0EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderIdLb0EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderINS_5types10ieee_floatEXT_EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderINS_5types11ieee_doubleEXT_EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderINS_5types8x86_fp80EXT_EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderINS_5types5fp128EXT_EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderINS_5types9ppc_fp128EXT_EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderINS_5types7x86_mmxEXT_EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderIvXT_EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderIFT_vEXT0_EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderIFT_T0_EXT1_EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderIFT_T0_T1_EXT2_EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderIFT_T0_T1_T2_EXT3_EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderIFT_T0_T1_T2_T3_EXT4_EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderIFT_T0_T1_T2_T3_T4_EXT5_EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderIFT_zEXT0_EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderIFT_T0_zEXT1_EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderIFT_T0_T1_zEXT2_EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderIFT_T0_T1_T2_zEXT3_EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderIFT_T0_T1_T2_T3_zEXT4_EE3getERNS_11LLVMContextE'/>
<fun r='_ZN4llvm11TypeBuilderIFT_T0_T1_T2_T3_T4_zEXT5_EE3getERNS_11LLVMContextE'/>
