<dec f='include/llvm-6.0/llvm/Analysis/LazyCallGraph.h' l='801' type='void llvm::LazyCallGraph::RefSCC::removeOutgoingEdge(llvm::LazyCallGraph::Node &amp; SourceN, llvm::LazyCallGraph::Node &amp; TargetN)'/>
<doc f='include/llvm-6.0/llvm/Analysis/LazyCallGraph.h' l='791'>/// Remove an edge whose source is in this RefSCC and target is *not*.
    ///
    /// This removes an inter-RefSCC edge. All inter-RefSCC edges originating
    /// from this SCC have been fully explored by any in-flight DFS graph
    /// formation, so this is always safe to call once you have the source
    /// RefSCC.
    ///
    /// This operation does not change the cyclic structure of the graph and so
    /// is very inexpensive. It may change the connectivity graph of the SCCs
    /// though, so be careful calling this while iterating over them.</doc>
