<dec f='include/llvm-6.0/llvm/IR/DiagnosticInfo.h' l='90' type='int llvm::getNextAvailablePluginDiagnosticKind()'/>
<doc f='include/llvm-6.0/llvm/IR/DiagnosticInfo.h' l='82'>/// \brief Get the next available kind ID for a plugin diagnostic.
/// Each time this function is called, it returns a different number.
/// Therefore, a plugin that wants to &quot;identify&quot; its own classes
/// with a dynamic identifier, just have to use this method to get a new ID
/// and assign it to each of its classes.
/// The returned ID will be greater than or equal to DK_FirstPluginKind.
/// Thus, the plugin identifiers will not conflict with the
/// DiagnosticKind values.</doc>
