<dec f='include/llvm-6.0/llvm/Transforms/Utils/BasicBlockUtils.h' l='252' type='llvm::TerminatorInst * llvm::SplitBlockAndInsertIfThen(llvm::Value * Cond, llvm::Instruction * SplitBefore, bool Unreachable, llvm::MDNode * BranchWeights = nullptr, llvm::DominatorTree * DT = nullptr, llvm::LoopInfo * LI = nullptr)'/>
<doc f='include/llvm-6.0/llvm/Transforms/Utils/BasicBlockUtils.h' l='232'>/// Split the containing block at the specified instruction - everything before
/// SplitBefore stays in the old basic block, and the rest of the instructions
/// in the BB are moved to a new block. The two blocks are connected by a
/// conditional branch (with value of Cmp being the condition).
/// Before:
///   Head
///   SplitBefore
///   Tail
/// After:
///   Head
///   if (Cond)
///     ThenBlock
///   SplitBefore
///   Tail
///
/// If Unreachable is true, then ThenBlock ends with
/// UnreachableInst, otherwise it branches to Tail.
/// Returns the NewBasicBlock&apos;s terminator.
///
/// Updates DT and LI if given.</doc>
