<dec f='include/llvm-6.0/llvm/Transforms/Instrumentation.h' l='100' type='llvm::Instruction * llvm::pgo::promoteIndirectCall(llvm::Instruction * Inst, llvm::Function * F, uint64_t Count, uint64_t TotalCount, bool AttachProfToDirectCall, llvm::OptimizationRemarkEmitter * ORE)'/>
<doc f='include/llvm-6.0/llvm/Transforms/Instrumentation.h' l='87'>// Helper function that transforms Inst (either an indirect-call instruction, or
// an invoke instruction , to a conditional call to F. This is like:
//     if (Inst.CalledValue == F)
//        F(...);
//     else
//        Inst(...);
//     end
// TotalCount is the profile count value that the instruction executes.
// Count is the profile count value that F is the target function.
// These two values are used to update the branch weight.
// If \p AttachProfToDirectCall is true, a prof metadata is attached to the
// new direct call to contain \p Count.
// Returns the promoted direct call instruction.</doc>
