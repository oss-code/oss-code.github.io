<def f='include/llvm-6.0/llvm/Analysis/CallGraph.h' l='384' ll='386' type='llvm::CallGraphNode * llvm::CallGraphWrapperPass::getOrInsertFunction(const llvm::Function * F)'/>
<doc f='include/llvm-6.0/llvm/Analysis/CallGraph.h' l='382'>/// \brief Similar to operator[], but this will insert a new CallGraphNode for
  /// \c F if one does not already exist.</doc>
