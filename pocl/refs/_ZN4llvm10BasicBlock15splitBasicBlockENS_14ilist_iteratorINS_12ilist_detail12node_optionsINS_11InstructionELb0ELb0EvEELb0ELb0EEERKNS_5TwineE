<dec f='include/llvm-6.0/llvm/IR/BasicBlock.h' l='369' type='llvm::BasicBlock * llvm::BasicBlock::splitBasicBlock(iterator I, const llvm::Twine &amp; BBName = &quot;&quot;)'/>
<use f='include/llvm-6.0/llvm/IR/BasicBlock.h' l='371' u='c' c='_ZN4llvm10BasicBlock15splitBasicBlockEPNS_11InstructionERKNS_5TwineE'/>
<doc f='include/llvm-6.0/llvm/IR/BasicBlock.h' l='353'>/// \brief Split the basic block into two basic blocks at the specified
  /// instruction.
  ///
  /// Note that all instructions BEFORE the specified iterator stay as part of
  /// the original basic block, an unconditional branch is added to the original
  /// BB, and the rest of the instructions in the BB are moved to the new BB,
  /// including the old terminator.  The newly formed BasicBlock is returned.
  /// This function invalidates the specified iterator.
  ///
  /// Note that this only works on well formed basic blocks (must have a
  /// terminator), and &apos;I&apos; must not be the end of instruction list (which would
  /// cause a degenerate basic block to be formed, having a terminator inside of
  /// the basic block).
  ///
  /// Also note that this doesn&apos;t preserve any passes. To split blocks while
  /// keeping loop information consistent, use the SplitBlock utility function.</doc>
