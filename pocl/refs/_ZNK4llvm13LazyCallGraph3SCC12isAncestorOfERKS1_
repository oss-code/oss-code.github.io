<dec f='include/llvm-6.0/llvm/Analysis/LazyCallGraph.h' l='507' type='bool llvm::LazyCallGraph::SCC::isAncestorOf(const llvm::LazyCallGraph::SCC &amp; C) const'/>
<use f='include/llvm-6.0/llvm/Analysis/LazyCallGraph.h' l='519' u='c' c='_ZNK4llvm13LazyCallGraph3SCC14isDescendantOfERKS1_'/>
<doc f='include/llvm-6.0/llvm/Analysis/LazyCallGraph.h' l='501'>/// Test if this SCC is an ancestor of \a C.
    ///
    /// Note that in the worst case this is linear in the number of edges
    /// departing the current SCC and every SCC in the entire graph reachable
    /// from this SCC. Thus this very well may walk every edge in the entire
    /// call graph! Do not call this in a tight loop!</doc>
