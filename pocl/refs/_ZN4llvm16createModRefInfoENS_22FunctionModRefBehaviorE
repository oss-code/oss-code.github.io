<def f='include/llvm-6.0/llvm/Analysis/AliasAnalysis.h' l='282' ll='285' type='llvm::ModRefInfo llvm::createModRefInfo(const llvm::FunctionModRefBehavior FMRB)'/>
<use f='include/llvm-6.0/llvm/Analysis/AliasAnalysis.h' l='454' u='c' c='_ZN4llvm9AAResults15onlyReadsMemoryENS_22FunctionModRefBehaviorE'/>
<use f='include/llvm-6.0/llvm/Analysis/AliasAnalysis.h' l='460' u='c' c='_ZN4llvm9AAResults17doesNotReadMemoryENS_22FunctionModRefBehaviorE'/>
<use f='include/llvm-6.0/llvm/Analysis/AliasAnalysis.h' l='474' u='c' c='_ZN4llvm9AAResults21doesAccessArgPointeesENS_22FunctionModRefBehaviorE'/>
<use f='include/llvm-6.0/llvm/Analysis/AliasAnalysis.h' l='487' u='c' c='_ZN4llvm9AAResults25doesAccessInaccessibleMemENS_22FunctionModRefBehaviorE'/>
<use f='include/llvm-6.0/llvm/Analysis/AliasAnalysis.h' l='621' u='c' c='_ZN4llvm9AAResults13getModRefInfoEPKNS_11InstructionERKNS_8OptionalINS_14MemoryLocationEEE'/>
<doc f='include/llvm-6.0/llvm/Analysis/AliasAnalysis.h' l='278'>// Wrapper method strips bits significant only in FunctionModRefBehavior,
// to obtain a valid ModRefInfo. The benefit of using the wrapper is that if
// ModRefInfo enum changes, the wrapper can be updated to &amp; with the new enum
// entry with all bits set to 1.</doc>
