<dec f='include/llvm-6.0/llvm/IR/InstrTypes.h' l='909' type='static llvm::CmpInst * llvm::CmpInst::Create(llvm::Instruction::OtherOps Op, llvm::CmpInst::Predicate predicate, llvm::Value * S1, llvm::Value * S2, const llvm::Twine &amp; Name = &quot;&quot;, llvm::Instruction * InsertBefore = nullptr)'/>
<doc f='include/llvm-6.0/llvm/IR/InstrTypes.h' l='904'>/// Construct a compare instruction, given the opcode, the predicate and
  /// the two operands.  Optionally (if InstBefore is specified) insert the
  /// instruction into a BasicBlock right before the specified instruction.
  /// The specified Instruction is allowed to be a dereferenced end iterator.
  /// @brief Create a CmpInst</doc>
<use f='pocl/lib/llvmopencl/BreakConstantGEPs.cpp' l='200' u='c' c='_ZL17convertExpressionPN4llvm12ConstantExprEPNS_11InstructionE'/>
