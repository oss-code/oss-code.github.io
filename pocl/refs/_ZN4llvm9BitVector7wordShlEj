<use f='include/llvm-6.0/llvm/ADT/BitVector.h' l='659' u='c' c='_ZN4llvm9BitVectorlSEj'/>
<def f='include/llvm-6.0/llvm/ADT/BitVector.h' l='796' ll='811' type='void llvm::BitVector::wordShl(uint32_t Count)'/>
<doc f='include/llvm-6.0/llvm/ADT/BitVector.h' l='782'>/// \brief Perform a logical left shift of \p Count words by moving everything
  /// \p Count words to the right in memory.
  ///
  /// While confusing, words are stored from least significant at Bits[0] to
  /// most significant at Bits[NumWords-1].  A logical shift left, however,
  /// moves the current least significant bit to a higher logical index, and
  /// fills the previous least significant bits with 0.  Thus, we actually
  /// need to move the bytes of the memory to the right, not to the left.
  /// Example:
  ///   Words = [0xBBBBAAAA, 0xDDDDFFFF, 0x00000000, 0xDDDD0000]
  /// represents a BitVector where 0xBBBBAAAA contain the least significant
  /// bits.  So if we want to shift the BitVector left by 2 words, we need to
  /// turn this into 0x00000000 0x00000000 0xBBBBAAAA 0xDDDDFFFF by using a
  /// memmove which moves right, not left.</doc>
