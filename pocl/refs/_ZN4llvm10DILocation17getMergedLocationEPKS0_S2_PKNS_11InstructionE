<dec f='include/llvm-6.0/llvm/IR/DebugInfoMetadata.h' l='1429' type='static const llvm::DILocation * llvm::DILocation::getMergedLocation(const llvm::DILocation * LocA, const llvm::DILocation * LocB, const llvm::Instruction * ForInst = nullptr)'/>
<doc f='include/llvm-6.0/llvm/IR/DebugInfoMetadata.h' l='1411'>/// When two instructions are combined into a single instruction we also
  /// need to combine the original locations into a single location.
  ///
  /// When the locations are the same we can use either location. When they
  /// differ, we need a third location which is distinct from either. If
  /// they have the same file/line but have a different discriminator we
  /// could create a location with a new discriminator. If they are from
  /// different files/lines the location is ambiguous and can&apos;t be
  /// represented in a single line entry.  In this case, no location
  /// should be set, unless the merged instruction is a call, which we will
  /// set the merged debug location as line 0 of the nearest common scope
  /// where 2 locations are inlined from. This only applies to Instruction;
  /// for MachineInstruction, as it is post-inline, we will treat the call
  /// instruction the same way as other instructions.
  ///
  /// \p ForInst: The Instruction the merged DILocation is for. If the
  /// Instruction is unavailable or non-existent, use nullptr.</doc>
