<def f='include/llvm-6.0/llvm/Analysis/LoopInfo.h' l='414' ll='425' type='void llvm::LoopBase::~LoopBase&lt;N, M&gt;()'/>
<doc f='include/llvm-6.0/llvm/Analysis/LoopInfo.h' l='405'>// Since loop passes like SCEV are allowed to key analysis results off of
  // `Loop` pointers, we cannot re-use pointers within a loop pass manager.
  // This means loop passes should not be `delete` ing `Loop` objects directly
  // (and risk a later `Loop` allocation re-using the address of a previous one)
  // but should be using LoopInfo::markAsRemoved, which keeps around the `Loop`
  // pointer till the end of the lifetime of the `LoopInfo` object.
  //
  // To make it easier to follow this rule, we mark the destructor as
  // non-public.</doc>
