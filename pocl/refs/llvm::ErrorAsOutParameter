<def f='include/llvm-6.0/llvm/Support/Error.h' l='990' ll='1006'/>
<size>8</size>
<doc f='include/llvm-6.0/llvm/Support/Error.h' l='966'>/// Helper for Errors used as out-parameters.
///
/// This helper is for use with the Error-as-out-parameter idiom, where an error
/// is passed to a function or method by reference, rather than being returned.
/// In such cases it is helpful to set the checked bit on entry to the function
/// so that the error can be written to (unchecked Errors abort on assignment)
/// and clear the checked bit on exit so that clients cannot accidentally forget
/// to check the result. This helper performs these actions automatically using
/// RAII:
///
///   @code{.cpp}
///   Result foo(Error &amp;Err) {
///     ErrorAsOutParameter ErrAsOutParam(&amp;Err); // &apos;Checked&apos; flag set
///     // &lt;body of foo&gt;
///     // &lt;- &apos;Checked&apos; flag auto-cleared when ErrAsOutParam is destructed.
///   }
///   @endcode
///
/// ErrorAsOutParameter takes an Error* rather than Error&amp; so that it can be
/// used with optional Errors (Error pointers that are allowed to be null). If
/// ErrorAsOutParameter took an Error reference, an instance would have to be
/// created inside every condition that verified that Error was non-null. By
/// taking an Error pointer we can just create one instance at the top of the
/// function.</doc>
<fun r='_ZN4llvm19ErrorAsOutParameterC1EPNS_5ErrorE'/>
<fun r='_ZN4llvm19ErrorAsOutParameterD1Ev'/>
<mbr r='llvm::ErrorAsOutParameter::Err' o='0' t='llvm::Error *'/>
