<def f='include/llvm-6.0/llvm/Analysis/LoopInfo.h' l='187' ll='193' type='bool llvm::LoopBase::isInvalid() const'/>
<doc f='include/llvm-6.0/llvm/Analysis/LoopInfo.h' l='181'>/// Return true if this loop is no longer valid.  The only valid use of this
  /// helper is &quot;assert(L.isInvalid())&quot; or equivalent, since IsInvalid is set to
  /// true by the destructor.  In other words, if this accessor returns true,
  /// the caller has already triggered UB by calling this accessor; and so it
  /// can only be called in a context where a return value of true indicates a
  /// programmer error.</doc>
