<dec f='include/llvm-6.0/llvm/IR/Instructions.h' l='3578' type='void llvm::InvokeInst::InvokeInst(llvm::Value * Func, llvm::BasicBlock * IfNormal, llvm::BasicBlock * IfException, ArrayRef&lt;llvm::Value *&gt; Args, ArrayRef&lt;OperandBundleDef&gt; Bundles, unsigned int Values, const llvm::Twine &amp; NameStr, llvm::BasicBlock * InsertAtEnd)'/>
<use f='include/llvm-6.0/llvm/IR/Instructions.h' l='3652' u='c' c='_ZN4llvm10InvokeInst6CreateEPNS_5ValueEPNS_10BasicBlockES4_NS_8ArrayRefIS2_EERKNS_5TwineES4_'/>
<use f='include/llvm-6.0/llvm/IR/Instructions.h' l='3664' u='c' c='_ZN4llvm10InvokeInst6CreateEPNS_5ValueEPNS_10BasicBlockES4_NS_8ArrayRefIS2_EENS5_INS_17OperandBundleDefTIS2_EEEERKNS_5TwineES4_'/>
<def f='include/llvm-6.0/llvm/IR/Instructions.h' l='4070' ll='4080' type='void llvm::InvokeInst::InvokeInst(llvm::Value * Func, llvm::BasicBlock * IfNormal, llvm::BasicBlock * IfException, ArrayRef&lt;llvm::Value *&gt; Args, ArrayRef&lt;OperandBundleDef&gt; Bundles, unsigned int Values, const llvm::Twine &amp; NameStr, llvm::BasicBlock * InsertAtEnd)'/>
<doc f='include/llvm-6.0/llvm/IR/Instructions.h' l='3575'>/// Construct an InvokeInst given a range of arguments.
  ///
  /// Construct an InvokeInst from a range of arguments</doc>
