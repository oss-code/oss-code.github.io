<dec f='include/c++/7/bits/hashtable.h' l='671' type='iterator std::_Hashtable::_M_insert_multi_node(__node_type * __hint, __hash_code __code, __node_type * __n)'/>
<use f='include/c++/7/bits/hashtable.h' l='1696' u='c' c='_ZNSt10_Hashtable10_M_emplaceENSt8__detail15_Hashtable_baseIT_T0_T2_T3_T4_T5_T6_T8_E14const_iteratorESt17integral_constantIbLb0EEDpOT_'/>
<def f='include/c++/7/bits/hashtable.h' l='1738' ll='1799' type='iterator std::_Hashtable::_M_insert_multi_node(__node_type * __hint, __hash_code __code, __node_type * __node)'/>
<use f='include/c++/7/bits/hashtable.h' l='1845' u='c' c='_ZNSt10_Hashtable9_M_insertENSt8__detail15_Hashtable_baseIT_T0_T2_T3_T4_T5_T6_T8_E14const_iteratorEOT_RKT0_St17integral_constantIbLb0EE'/>
<doc f='include/c++/7/bits/hashtable.h' l='668'>// Insert node with hash code __code. Take ownership of the node,
      // deallocate it on exception.</doc>
<doc f='include/c++/7/bits/hashtable.h' l='1736'>// Insert node, in bucket bkt if no rehash (assumes no element with its key
  // already present). Take ownership of the node, deallocate it on exception.</doc>
