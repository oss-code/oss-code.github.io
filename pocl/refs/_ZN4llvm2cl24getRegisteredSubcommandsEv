<dec f='include/llvm-6.0/llvm/Support/CommandLine.h' l='1822' type='iterator_range&lt;typename SmallPtrSet&lt;SubCommand *, 4&gt;::iterator&gt; llvm::cl::getRegisteredSubcommands()'/>
<doc f='include/llvm-6.0/llvm/Support/CommandLine.h' l='1802'>/// \brief Use this to get all registered SubCommands from the provided parser.
///
/// \return A range of all SubCommand pointers registered with the parser.
///
/// Typical usage:
/// \code
/// main(int argc, char* argv[]) {
///   llvm::cl::ParseCommandLineOptions(argc, argv);
///   for (auto* S : llvm::cl::getRegisteredSubcommands()) {
///     if (*S) {
///       std::cout &lt;&lt; &quot;Executing subcommand: &quot; &lt;&lt; S-&gt;getName() &lt;&lt; std::endl;
///       // Execute some function based on the name...
///     }
///   }
/// }
/// \endcode
///
/// This interface is useful for defining subcommands in libraries and
/// the dispatch from a single point (like in the main function).</doc>
