<dec f='include/llvm-6.0/llvm/Analysis/LazyCallGraph.h' l='696' type='bool llvm::LazyCallGraph::RefSCC::switchInternalEdgeToCall(llvm::LazyCallGraph::Node &amp; SourceN, llvm::LazyCallGraph::Node &amp; TargetN, function_ref&lt;void (ArrayRef&lt;llvm::LazyCallGraph::SCC *&gt;)&gt; MergeCB = {})'/>
<doc f='include/llvm-6.0/llvm/Analysis/LazyCallGraph.h' l='670'>///@{
    /// \name Mutation API
    ///
    /// These methods provide the core API for updating the call graph in the
    /// presence of (potentially still in-flight) DFS-found RefSCCs and SCCs.
    ///
    /// Note that these methods sometimes have complex runtimes, so be careful
    /// how you call them.

    /// Make an existing internal ref edge into a call edge.
    ///
    /// This may form a larger cycle and thus collapse SCCs into TargetN&apos;s SCC.
    /// If that happens, the optional callback \p MergedCB will be invoked (if
    /// provided) on the SCCs being merged away prior to actually performing
    /// the merge. Note that this will never include the target SCC as that
    /// will be the SCC functions are merged into to resolve the cycle. Once
    /// this function returns, these merged SCCs are not in a valid state but
    /// the pointers will remain valid until destruction of the parent graph
    /// instance for the purpose of clearing cached information. This function
    /// also returns &apos;true&apos; if a cycle was formed and some SCCs merged away as
    /// a convenience.
    ///
    /// After this operation, both SourceN&apos;s SCC and TargetN&apos;s SCC may move
    /// position within this RefSCC&apos;s postorder list. Any SCCs merged are
    /// merged into the TargetN&apos;s SCC in order to preserve reachability analyses
    /// which took place on that SCC.</doc>
