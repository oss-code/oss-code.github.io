<def f='pocl/lib/CL/pocl_llvm_api.h' l='57' ll='65'/>
<size>1</size>
<doc f='pocl/lib/CL/pocl_llvm_api.h' l='40'>/* The LLVM API interface functions are not thread safe at the moment;
 * Pocl needs to ensure only one thread is using this layer at the time.
 *
 * Pocl used a llvm::sys::Mutex class variable before, unfortunately,
 * using llvm::sys::Mutex is not safe. Reason:
 *
 * if pocl is dlopened from a C++ program, pocl&apos;s C++ object destructors
 * are called before the program&apos;s dtors. This causes the Mutex to be destroyed,
 * and if the program&apos;s dtors call clReleaseProgram()
 * -&gt; pocl_free_llvm_irs() -&gt; llvm::PoclMutexGuard guard_variable(Mutex)
 * ... the program will freeze/segfault.
 *
 * This happens with many ViennaCL examples.
 *
 * This class is a replacement that uses a simple pthread lock
 */</doc>
<fun r='_ZN22PoclCompilerMutexGuardC1ERKS_'/>
<fun r='_ZN22PoclCompilerMutexGuardaSERKS_'/>
<fun r='_ZN22PoclCompilerMutexGuardC1EPv'/>
<fun r='_ZN22PoclCompilerMutexGuardD1Ev'/>
