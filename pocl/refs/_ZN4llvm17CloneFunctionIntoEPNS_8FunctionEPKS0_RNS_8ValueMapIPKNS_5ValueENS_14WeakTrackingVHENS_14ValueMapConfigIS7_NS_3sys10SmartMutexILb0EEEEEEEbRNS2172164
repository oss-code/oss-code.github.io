<dec f='include/llvm-6.0/llvm/Transforms/Utils/Cloning.h' l='141' type='void llvm::CloneFunctionInto(llvm::Function * NewFunc, const llvm::Function * OldFunc, ValueToValueMapTy &amp; VMap, bool ModuleLevelChanges, SmallVectorImpl&lt;llvm::ReturnInst *&gt; &amp; Returns, const char * NameSuffix = &quot;&quot;, llvm::ClonedCodeInfo * CodeInfo = nullptr, llvm::ValueMapTypeRemapper * TypeMapper = nullptr, llvm::ValueMaterializer * Materializer = nullptr)'/>
<use f='pocl/lib/CL/devices/cuda/pocl-ptx-gen.cc' l='437' u='c' c='_ZL16handleGetWorkDimPN4llvm6ModuleEPKc'/>
<use f='pocl/lib/CL/devices/cuda/pocl-ptx-gen.cc' l='671' u='c' c='_Z23convertPtrArgsToOffsetsPN4llvm6ModuleEPKcjPNS_14GlobalVariableE'/>
<doc f='include/llvm-6.0/llvm/Transforms/Utils/Cloning.h' l='132'>/// Clone OldFunc into NewFunc, transforming the old arguments into references
/// to VMap values.  Note that if NewFunc already has basic blocks, the ones
/// cloned into it will be added to the end of the function.  This function
/// fills in a list of return instructions, and can optionally remap types
/// and/or append the specified suffix to all values cloned.
///
/// If ModuleLevelChanges is false, VMap contains no non-identity GlobalValue
/// mappings.
///</doc>
<use f='pocl/lib/llvmopencl/AutomaticLocals.cc' l='198' u='c' c='_ZN12_GLOBAL__N_115AutomaticLocals22processAutomaticLocalsEPN4llvm8FunctionE'/>
<use f='pocl/lib/llvmopencl/Workgroup.cc' l='465' u='c' c='_ZL27cloneFunctionWithPrintfArgsPN4llvm5ValueES1_S1_PNS_8FunctionEPNS_6ModuleE'/>
<use f='pocl/lib/llvmopencl/linker.cpp' l='153' u='c' c='_ZL24CloneFuncFixOpenCLImageTPN4llvm6ModuleEPNS_8FunctionE'/>
<use f='pocl/lib/llvmopencl/linker.cpp' l='239' u='c' c='_ZL8CopyFuncN4llvm9StringRefEPKNS_6ModuleEPS1_RNS_8ValueMapIPKNS_5ValueENS_14WeakTrackingVHENS_14ValueMapConfigIS8_NS_3sys10SmartMutexILb0EEEEEEE'/>
