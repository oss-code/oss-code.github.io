<def f='include/llvm-6.0/llvm/Analysis/CallGraph.h' l='378' ll='380' type='llvm::Function * llvm::CallGraphWrapperPass::removeFunctionFromModule(llvm::CallGraphNode * CGN)'/>
<doc f='include/llvm-6.0/llvm/Analysis/CallGraph.h' l='367'>//===---------------------------------------------------------------------
  // Functions to keep a call graph up to date with a function that has been
  // modified.
  //

  /// \brief Unlink the function from this module, returning it.
  ///
  /// Because this removes the function from the module, the call graph node is
  /// destroyed.  This is only valid if the function does not call any other
  /// functions (ie, there are no edges in it&apos;s CGN).  The easiest way to do
  /// this is to dropAllReferences before calling this.</doc>
