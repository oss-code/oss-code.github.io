<dec f='include/llvm-6.0/llvm/Support/CommandLine.h' l='1840' type='void llvm::cl::TokenizeGNUCommandLine(llvm::StringRef Source, llvm::StringSaver &amp; Saver, SmallVectorImpl&lt;const char *&gt; &amp; NewArgv, bool MarkEOLs = false)'/>
<doc f='include/llvm-6.0/llvm/Support/CommandLine.h' l='1824'>//===----------------------------------------------------------------------===//
// Standalone command line processing utilities.
//

/// \brief Tokenizes a command line that can contain escapes and quotes.
//
/// The quoting rules match those used by GCC and other tools that use
/// libiberty&apos;s buildargv() or expandargv() utilities, and do not match bash.
/// They differ from buildargv() on treatment of backslashes that do not escape
/// a special character to make it possible to accept most Windows file paths.
///
/// \param [in] Source The string to be split on whitespace with quotes.
/// \param [in] Saver Delegates back to the caller for saving parsed strings.
/// \param [in] MarkEOLs true if tokenizing a response file and you want end of
/// lines and end of the response file to be marked with a nullptr string.
/// \param [out] NewArgv All parsed strings are appended to NewArgv.</doc>
