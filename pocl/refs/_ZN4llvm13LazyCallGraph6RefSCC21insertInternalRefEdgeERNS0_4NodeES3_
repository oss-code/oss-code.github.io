<dec f='include/llvm-6.0/llvm/Analysis/LazyCallGraph.h' l='753' type='void llvm::LazyCallGraph::RefSCC::insertInternalRefEdge(llvm::LazyCallGraph::Node &amp; SourceN, llvm::LazyCallGraph::Node &amp; TargetN)'/>
<doc f='include/llvm-6.0/llvm/Analysis/LazyCallGraph.h' l='741'>/// Insert a ref edge from one node in this RefSCC to another in this
    /// RefSCC.
    ///
    /// This is always a trivial operation as it doesn&apos;t change any part of the
    /// graph structure besides connecting the two nodes.
    ///
    /// Note that we don&apos;t support directly inserting internal *call* edges
    /// because that could change the graph structure and requires returning
    /// information about what became invalid. As a consequence, the pattern
    /// should be to first insert the necessary ref edge, and then to switch it
    /// to a call edge if needed and handle any invalidation that results. See
    /// the \c switchInternalEdgeToCall routine for details.</doc>
