<def f='include/llvm-6.0/llvm/IR/InstrTypes.h' l='927' ll='929' type='llvm::CmpInst::Predicate llvm::CmpInst::getPredicate() const'/>
<use f='include/llvm-6.0/llvm/IR/InstrTypes.h' l='944' u='c' c='_ZNK4llvm7CmpInst13isFPPredicateEv'/>
<use f='include/llvm-6.0/llvm/IR/InstrTypes.h' l='945' u='c' c='_ZNK4llvm7CmpInst14isIntPredicateEv'/>
<use f='include/llvm-6.0/llvm/IR/InstrTypes.h' l='952' u='c' c='_ZNK4llvm7CmpInst19getInversePredicateEv'/>
<use f='include/llvm-6.0/llvm/IR/InstrTypes.h' l='968' u='c' c='_ZNK4llvm7CmpInst19getSwappedPredicateEv'/>
<use f='include/llvm-6.0/llvm/IR/InstrTypes.h' l='995' u='c' c='_ZNK4llvm7CmpInst8isSignedEv'/>
<use f='include/llvm-6.0/llvm/IR/InstrTypes.h' l='1001' u='c' c='_ZNK4llvm7CmpInst10isUnsignedEv'/>
<use f='include/llvm-6.0/llvm/IR/InstrTypes.h' l='1014' u='c' c='_ZN4llvm7CmpInst18getSignedPredicateEv'/>
<use f='include/llvm-6.0/llvm/IR/InstrTypes.h' l='1020' u='c' c='_ZNK4llvm7CmpInst15isTrueWhenEqualEv'/>
<use f='include/llvm-6.0/llvm/IR/InstrTypes.h' l='1026' u='c' c='_ZNK4llvm7CmpInst16isFalseWhenEqualEv'/>
<use f='include/llvm-6.0/llvm/IR/Instructions.h' l='1176' u='c' c='_ZNK4llvm8ICmpInst18getSignedPredicateEv'/>
<use f='include/llvm-6.0/llvm/IR/Instructions.h' l='1188' u='c' c='_ZNK4llvm8ICmpInst20getUnsignedPredicateEv'/>
<use f='include/llvm-6.0/llvm/IR/Instructions.h' l='1204' u='c' c='_ZNK4llvm8ICmpInst10isEqualityEv'/>
<use f='include/llvm-6.0/llvm/IR/Instructions.h' l='1314' u='c' c='_ZNK4llvm8FCmpInst10isEqualityEv'/>
<use f='include/llvm-6.0/llvm/IR/Instructions.h' l='1320' u='c' c='_ZNK4llvm8FCmpInst13isCommutativeEv'/>
<use f='include/llvm-6.0/llvm/IR/Instructions.h' l='1321' u='c' c='_ZNK4llvm8FCmpInst13isCommutativeEv'/>
<use f='include/llvm-6.0/llvm/IR/Instructions.h' l='1322' u='c' c='_ZNK4llvm8FCmpInst13isCommutativeEv'/>
<use f='include/llvm-6.0/llvm/IR/Instructions.h' l='1323' u='c' c='_ZNK4llvm8FCmpInst13isCommutativeEv'/>
<doc f='include/llvm-6.0/llvm/IR/InstrTypes.h' l='926'>/// @brief Return the predicate for this instruction.</doc>
