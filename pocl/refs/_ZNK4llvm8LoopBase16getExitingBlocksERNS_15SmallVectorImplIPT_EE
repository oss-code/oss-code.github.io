<dec f='include/llvm-6.0/llvm/Analysis/LoopInfo.h' l='244' type='void llvm::LoopBase::getExitingBlocks(SmallVectorImpl&lt;BlockT *&gt; &amp; ExitingBlocks) const'/>
<doc f='include/llvm-6.0/llvm/Analysis/LoopInfo.h' l='233'>//===--------------------------------------------------------------------===//
  // APIs for simple analysis of the loop.
  //
  // Note that all of these methods can fail on general loops (ie, there may not
  // be a preheader, etc).  For best success, the loop simplification and
  // induction variable canonicalization pass should be used to normalize loops
  // for easy analysis.  These methods assume canonical loops.

  /// Return all blocks inside the loop that have successors outside of the
  /// loop. These are the blocks _inside of the current loop_ which branch out.
  /// The returned list is always unique.</doc>
