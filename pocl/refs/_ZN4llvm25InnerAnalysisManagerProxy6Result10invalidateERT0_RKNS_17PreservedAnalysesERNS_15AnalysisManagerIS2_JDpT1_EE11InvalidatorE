<dec f='include/llvm-6.0/llvm/IR/PassManager.h' l='993' type='bool llvm::InnerAnalysisManagerProxy::Result::invalidate(IRUnitT &amp; IR, const llvm::PreservedAnalyses &amp; PA, typename AnalysisManager&lt;IRUnitT, ExtraArgTs...&gt;::Invalidator &amp; Inv)'/>
<dec f='include/llvm-6.0/llvm/IR/PassManager.h' l='1034' type='bool llvm::InnerAnalysisManagerProxy&lt;llvm::AnalysisManager&lt;llvm::Function&gt;, llvm::Module&gt;::Result::invalidate(llvm::Module &amp; M, const llvm::PreservedAnalyses &amp; PA, ModuleAnalysisManager::Invalidator &amp; Inv)'/>
<doc f='include/llvm-6.0/llvm/IR/PassManager.h' l='983'>/// \brief Handler for invalidation of the outer IR unit, \c IRUnitT.
    ///
    /// If the proxy analysis itself is not preserved, we assume that the set of
    /// inner IR objects contained in IRUnit may have changed.  In this case,
    /// we have to call \c clear() on the inner analysis manager, as it may now
    /// have stale pointers to its inner IR objects.
    ///
    /// Regardless of whether the proxy analysis is marked as preserved, all of
    /// the analyses in the inner analysis manager are potentially invalidated
    /// based on the set of preserved analyses.</doc>
<doc f='include/llvm-6.0/llvm/IR/PassManager.h' l='1031'>/// Specialization of the invalidate method for the \c
/// FunctionAnalysisManagerModuleProxy&apos;s result.</doc>
