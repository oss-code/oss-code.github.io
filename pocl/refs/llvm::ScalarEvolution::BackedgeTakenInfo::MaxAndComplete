<dec f='include/llvm-6.0/llvm/Analysis/ScalarEvolution.h' l='1194' type='PointerIntPair&lt;const llvm::SCEV *, 1&gt;'/>
<use f='include/llvm-6.0/llvm/Analysis/ScalarEvolution.h' l='1201' u='m' c='_ZNK4llvm15ScalarEvolution17BackedgeTakenInfo10isCompleteEv'/>
<use f='include/llvm-6.0/llvm/Analysis/ScalarEvolution.h' l='1202' u='m' c='_ZNK4llvm15ScalarEvolution17BackedgeTakenInfo6getMaxEv'/>
<use f='include/llvm-6.0/llvm/Analysis/ScalarEvolution.h' l='1206' u='w' c='_ZN4llvm15ScalarEvolution17BackedgeTakenInfoC1Ev'/>
<offset>448</offset>
<doc f='include/llvm-6.0/llvm/Analysis/ScalarEvolution.h' l='1187'>/// The pointer part of \c MaxAndComplete is an expression indicating the
    /// least maximum backedge-taken count of the loop that is known, or a
    /// SCEVCouldNotCompute. This expression is only valid if the predicates
    /// associated with all loop exits are true.
    ///
    /// The integer part of \c MaxAndComplete is a boolean indicating if \c
    /// ExitNotTaken has an element for every exiting block in the loop.</doc>
