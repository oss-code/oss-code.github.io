<dec f='include/llvm-6.0/llvm/Analysis/AliasAnalysis.h' l='325' type='llvm::AliasResult llvm::AAResults::alias(const llvm::MemoryLocation &amp; LocA, const llvm::MemoryLocation &amp; LocB)'/>
<use f='include/llvm-6.0/llvm/Analysis/AliasAnalysis.h' l='330' u='c' c='_ZN4llvm9AAResults5aliasEPKNS_5ValueEmS3_m'/>
<use f='include/llvm-6.0/llvm/Analysis/AliasAnalysis.h' l='342' u='c' c='_ZN4llvm9AAResults9isNoAliasERKNS_14MemoryLocationES3_'/>
<use f='include/llvm-6.0/llvm/Analysis/AliasAnalysis.h' l='359' u='c' c='_ZN4llvm9AAResults11isMustAliasERKNS_14MemoryLocationES3_'/>
<use f='include/llvm-6.0/llvm/Analysis/AliasAnalysis.h' l='887' u='c' c='_ZN4llvm12AAResultBase14AAResultsProxy5aliasERKNS_14MemoryLocationES4_'/>
<doc f='include/llvm-6.0/llvm/Analysis/AliasAnalysis.h' l='317'>//===--------------------------------------------------------------------===//
  /// \name Alias Queries
  /// @{

  /// The main low level interface to the alias analysis implementation.
  /// Returns an AliasResult indicating whether the two pointers are aliased to
  /// each other. This is the interface that must be implemented by specific
  /// alias analysis implementations.</doc>
