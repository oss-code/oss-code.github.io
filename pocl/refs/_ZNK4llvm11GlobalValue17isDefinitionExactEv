<def f='include/llvm-6.0/llvm/IR/GlobalValue.h' l='393' ll='395' type='bool llvm::GlobalValue::isDefinitionExact() const'/>
<use f='include/llvm-6.0/llvm/IR/GlobalValue.h' l='404' u='c' c='_ZNK4llvm11GlobalValue18hasExactDefinitionEv'/>
<doc f='include/llvm-6.0/llvm/IR/GlobalValue.h' l='367'>/// Return true if the currently visible definition of this global (if any) is
  /// exactly the definition we will see at runtime.
  ///
  /// Non-exact linkage types inhibits most non-inlining IPO, since a
  /// differently optimized variant of the same function can have different
  /// observable or undefined behavior than in the variant currently visible.
  /// For instance, we could have started with
  ///
  ///   void foo(int *v) {
  ///     int t = 5 / v[0];
  ///     (void) t;
  ///   }
  ///
  /// and &quot;refined&quot; it to
  ///
  ///   void foo(int *v) { }
  ///
  /// However, we cannot infer readnone for `foo`, since that would justify
  /// DSE&apos;ing a store to `v[0]` across a call to `foo`, which can cause
  /// undefined behavior if the linker replaces the actual call destination with
  /// the unoptimized `foo`.
  ///
  /// Inlining is okay across non-exact linkage types as long as they&apos;re not
  /// interposable (see \c isInterposable), since in such cases the currently
  /// visible variant is *a* correct implementation of the original source
  /// function; it just isn&apos;t the *only* correct implementation.</doc>
