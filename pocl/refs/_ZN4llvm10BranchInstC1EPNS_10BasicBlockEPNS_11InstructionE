<dec f='include/llvm-6.0/llvm/IR/Instructions.h' l='3003' type='void llvm::BranchInst::BranchInst(llvm::BasicBlock * IfTrue, llvm::Instruction * InsertBefore = nullptr)'/>
<use f='include/llvm-6.0/llvm/IR/Instructions.h' l='3021' u='c' c='_ZN4llvm10BranchInst6CreateEPNS_10BasicBlockEPNS_11InstructionE'/>
<doc f='include/llvm-6.0/llvm/IR/Instructions.h' l='2996'>// BranchInst constructors (where {B, T, F} are blocks, and C is a condition):
  // BranchInst(BB *B)                           - &apos;br B&apos;
  // BranchInst(BB* T, BB *F, Value *C)          - &apos;br C, T, F&apos;
  // BranchInst(BB* B, Inst *I)                  - &apos;br B&apos;        insert before I
  // BranchInst(BB* T, BB *F, Value *C, Inst *I) - &apos;br C, T, F&apos;, insert before I
  // BranchInst(BB* B, BB *I)                    - &apos;br B&apos;        insert at end
  // BranchInst(BB* T, BB *F, Value *C, BB *I)   - &apos;br C, T, F&apos;, insert at end</doc>
