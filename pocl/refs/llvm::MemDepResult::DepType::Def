<dec f='include/llvm-6.0/llvm/Analysis/MemoryDependenceAnalysis.h' l='92' type='2'/>
<use f='include/llvm-6.0/llvm/Analysis/MemoryDependenceAnalysis.h' l='120'/>
<use f='include/llvm-6.0/llvm/Analysis/MemoryDependenceAnalysis.h' l='133' u='c' c='_ZN4llvm12MemDepResult6getDefEPNS_11InstructionE'/>
<use f='include/llvm-6.0/llvm/Analysis/MemoryDependenceAnalysis.h' l='155' u='m' c='_ZNK4llvm12MemDepResult5isDefEv'/>
<use f='include/llvm-6.0/llvm/Analysis/MemoryDependenceAnalysis.h' l='183' c='_ZNK4llvm12MemDepResult7getInstEv'/>
<use f='include/llvm-6.0/llvm/Analysis/MemoryDependenceAnalysis.h' l='184' u='m' c='_ZNK4llvm12MemDepResult7getInstEv'/>
<doc f='include/llvm-6.0/llvm/Analysis/MemoryDependenceAnalysis.h' l='74'>/// This is a dependence on the specified instruction which defines or
    /// produces the desired memory location.  The pointer member of the
    /// MemDepResult pair holds the instruction that defines the memory.
    ///
    /// Cases of interest:
    ///   1. This could be a load or store for dependence queries on
    ///      load/store.  The value loaded or stored is the produced value.
    ///      Note that the pointer operand may be different than that of the
    ///      queried pointer due to must aliases and phi translation. Note
    ///      that the def may not be the same type as the query, the pointers
    ///      may just be must aliases.
    ///   2. For loads and stores, this could be an allocation instruction. In
    ///      this case, the load is loading an undef value or a store is the
    ///      first store to (that part of) the allocation.
    ///   3. Dependence queries on calls return Def only when they are readonly
    ///      calls or memory use intrinsics with identical callees and no
    ///      intervening clobbers.  No validation is done that the operands to
    ///      the calls are the same.</doc>
