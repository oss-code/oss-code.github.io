<def f='include/llvm-6.0/llvm/Support/CommandLine.h' l='1124' ll='1126'/>
<def f='include/llvm-6.0/llvm/Support/CommandLine.h' l='1129' ll='1133'/>
<def f='include/llvm-6.0/llvm/Support/CommandLine.h' l='1134' ll='1138'/>
<def f='include/llvm-6.0/llvm/Support/CommandLine.h' l='1139' ll='1143'/>
<def f='include/llvm-6.0/llvm/Support/CommandLine.h' l='1145' ll='1149'/>
<def f='include/llvm-6.0/llvm/Support/CommandLine.h' l='1151' ll='1153'/>
<def f='include/llvm-6.0/llvm/Support/CommandLine.h' l='1155' ll='1157'/>
<def f='include/llvm-6.0/llvm/Support/CommandLine.h' l='1159' ll='1161'/>
<def f='include/llvm-6.0/llvm/Support/CommandLine.h' l='1163' ll='1165'/>
<size>1</size>
<doc f='include/llvm-6.0/llvm/Support/CommandLine.h' l='1118'>//===----------------------------------------------------------------------===//
// applicator class - This class is used because we must use partial
// specialization to handle literal string arguments specially (const char* does
// not correctly respond to the apply method).  Because the syntax to use this
// is a pain, we have the &apos;apply&apos; method below to handle the nastiness...
//</doc>
<doc f='include/llvm-6.0/llvm/Support/CommandLine.h' l='1128'>// Handle const char* as a special case...</doc>
<fun r='_ZN4llvm2cl10applicator3optERKT_RT_'/>
<fun r='_ZN4llvm2cl10applicatorIAT__cE3optENS_9StringRefERT_'/>
<fun r='_ZN4llvm2cl10applicatorIAT__KcE3optENS_9StringRefERT_'/>
<fun r='_ZN4llvm2cl10applicatorINS_9StringRefEE3optES2_RT_'/>
<fun r='_ZN4llvm2cl10applicatorINS0_18NumOccurrencesFlagEE3optES2_RNS0_6OptionE'/>
<fun r='_ZN4llvm2cl10applicatorINS0_13ValueExpectedEE3optES2_RNS0_6OptionE'/>
<fun r='_ZN4llvm2cl10applicatorINS0_12OptionHiddenEE3optES2_RNS0_6OptionE'/>
<fun r='_ZN4llvm2cl10applicatorINS0_15FormattingFlagsEE3optES2_RNS0_6OptionE'/>
<fun r='_ZN4llvm2cl10applicatorINS0_9MiscFlagsEE3optES2_RNS0_6OptionE'/>
